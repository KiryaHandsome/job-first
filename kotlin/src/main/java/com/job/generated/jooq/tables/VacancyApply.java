/*
 * This file is generated by jOOQ.
 */
package com.job.generated.jooq.tables;


import com.job.generated.jooq.Indexes;
import com.job.generated.jooq.Public;
import com.job.generated.jooq.tables.records.VacancyApplyRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class VacancyApply extends TableImpl<VacancyApplyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.vacancy_apply</code>
     */
    public static final VacancyApply VACANCY_APPLY = new VacancyApply();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VacancyApplyRecord> getRecordType() {
        return VacancyApplyRecord.class;
    }

    /**
     * The column <code>public.vacancy_apply.vacancy_id</code>.
     */
    public final TableField<VacancyApplyRecord, UUID> VACANCY_ID = createField(DSL.name("vacancy_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.vacancy_apply.user_id</code>.
     */
    public final TableField<VacancyApplyRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.vacancy_apply.resume_id</code>.
     */
    public final TableField<VacancyApplyRecord, UUID> RESUME_ID = createField(DSL.name("resume_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.vacancy_apply.applied_at_millis</code>.
     */
    public final TableField<VacancyApplyRecord, Long> APPLIED_AT_MILLIS = createField(DSL.name("applied_at_millis"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.vacancy_apply.status</code>.
     */
    public final TableField<VacancyApplyRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.vacancy_apply.id</code>.
     */
    public final TableField<VacancyApplyRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID, this, "");

    private VacancyApply(Name alias, Table<VacancyApplyRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private VacancyApply(Name alias, Table<VacancyApplyRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.vacancy_apply</code> table reference
     */
    public VacancyApply(String alias) {
        this(DSL.name(alias), VACANCY_APPLY);
    }

    /**
     * Create an aliased <code>public.vacancy_apply</code> table reference
     */
    public VacancyApply(Name alias) {
        this(alias, VACANCY_APPLY);
    }

    /**
     * Create a <code>public.vacancy_apply</code> table reference
     */
    public VacancyApply() {
        this(DSL.name("vacancy_apply"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.VACANCY_APPLY_ID_IDX);
    }

    @Override
    public VacancyApply as(String alias) {
        return new VacancyApply(DSL.name(alias), this);
    }

    @Override
    public VacancyApply as(Name alias) {
        return new VacancyApply(alias, this);
    }

    @Override
    public VacancyApply as(Table<?> alias) {
        return new VacancyApply(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VacancyApply rename(String name) {
        return new VacancyApply(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VacancyApply rename(Name name) {
        return new VacancyApply(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VacancyApply rename(Table<?> name) {
        return new VacancyApply(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VacancyApply where(Condition condition) {
        return new VacancyApply(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VacancyApply where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VacancyApply where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VacancyApply where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VacancyApply where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VacancyApply where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VacancyApply where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VacancyApply where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VacancyApply whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VacancyApply whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
