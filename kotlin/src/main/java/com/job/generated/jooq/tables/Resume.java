/*
 * This file is generated by jOOQ.
 */
package com.job.generated.jooq.tables;


import com.job.generated.jooq.Keys;
import com.job.generated.jooq.Public;
import com.job.generated.jooq.tables.records.ResumeRecord;

import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Resume extends TableImpl<ResumeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.resume</code>
     */
    public static final Resume RESUME = new Resume();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResumeRecord> getRecordType() {
        return ResumeRecord.class;
    }

    /**
     * The column <code>public.resume.id</code>.
     */
    public final TableField<ResumeRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.resume.user_id</code>.
     */
    public final TableField<ResumeRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.resume.title</code>.
     */
    public final TableField<ResumeRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.resume.summary</code>.
     */
    public final TableField<ResumeRecord, String> SUMMARY = createField(DSL.name("summary"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.resume.created_at_millis</code>.
     */
    public final TableField<ResumeRecord, Long> CREATED_AT_MILLIS = createField(DSL.name("created_at_millis"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.resume.edited_at_millis</code>.
     */
    public final TableField<ResumeRecord, Long> EDITED_AT_MILLIS = createField(DSL.name("edited_at_millis"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.resume.is_active</code>.
     */
    public final TableField<ResumeRecord, Boolean> IS_ACTIVE = createField(DSL.name("is_active"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.resume.experience</code>.
     */
    public final TableField<ResumeRecord, JSONB> EXPERIENCE = createField(DSL.name("experience"), SQLDataType.JSONB, this, "");

    private Resume(Name alias, Table<ResumeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Resume(Name alias, Table<ResumeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.resume</code> table reference
     */
    public Resume(String alias) {
        this(DSL.name(alias), RESUME);
    }

    /**
     * Create an aliased <code>public.resume</code> table reference
     */
    public Resume(Name alias) {
        this(alias, RESUME);
    }

    /**
     * Create a <code>public.resume</code> table reference
     */
    public Resume() {
        this(DSL.name("resume"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ResumeRecord> getPrimaryKey() {
        return Keys.RESUME_PKEY;
    }

    @Override
    public Resume as(String alias) {
        return new Resume(DSL.name(alias), this);
    }

    @Override
    public Resume as(Name alias) {
        return new Resume(alias, this);
    }

    @Override
    public Resume as(Table<?> alias) {
        return new Resume(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Resume rename(String name) {
        return new Resume(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Resume rename(Name name) {
        return new Resume(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Resume rename(Table<?> name) {
        return new Resume(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Resume where(Condition condition) {
        return new Resume(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Resume where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Resume where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Resume where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Resume where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Resume where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Resume where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Resume where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Resume whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Resume whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
