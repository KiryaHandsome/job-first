/*
 * This file is generated by jOOQ.
 */
package com.job.generated.jooq.tables;


import com.job.generated.jooq.Keys;
import com.job.generated.jooq.Public;
import com.job.generated.jooq.tables.records.VacancyRecord;

import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Vacancy extends TableImpl<VacancyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.vacancy</code>
     */
    public static final Vacancy VACANCY = new Vacancy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VacancyRecord> getRecordType() {
        return VacancyRecord.class;
    }

    /**
     * The column <code>public.vacancy.id</code>.
     */
    public final TableField<VacancyRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.vacancy.title</code>.
     */
    public final TableField<VacancyRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.vacancy.salary_min</code>.
     */
    public final TableField<VacancyRecord, Long> SALARY_MIN = createField(DSL.name("salary_min"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.vacancy.salary_max</code>.
     */
    public final TableField<VacancyRecord, Long> SALARY_MAX = createField(DSL.name("salary_max"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.vacancy.salary_currency</code>.
     */
    public final TableField<VacancyRecord, String> SALARY_CURRENCY = createField(DSL.name("salary_currency"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.vacancy.work_type</code>.
     */
    public final TableField<VacancyRecord, String> WORK_TYPE = createField(DSL.name("work_type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.vacancy.location</code>.
     */
    public final TableField<VacancyRecord, String> LOCATION = createField(DSL.name("location"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.vacancy.description</code>.
     */
    public final TableField<VacancyRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.vacancy.experience_level</code>.
     */
    public final TableField<VacancyRecord, String> EXPERIENCE_LEVEL = createField(DSL.name("experience_level"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.vacancy.views_count</code>.
     */
    public final TableField<VacancyRecord, Integer> VIEWS_COUNT = createField(DSL.name("views_count"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.vacancy.employer_id</code>.
     */
    public final TableField<VacancyRecord, UUID> EMPLOYER_ID = createField(DSL.name("employer_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.vacancy.created_at_millis</code>.
     */
    public final TableField<VacancyRecord, Long> CREATED_AT_MILLIS = createField(DSL.name("created_at_millis"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.vacancy.edited_at_millis</code>.
     */
    public final TableField<VacancyRecord, Long> EDITED_AT_MILLIS = createField(DSL.name("edited_at_millis"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.vacancy.status</code>.
     */
    public final TableField<VacancyRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.CLOB, this, "");

    private Vacancy(Name alias, Table<VacancyRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Vacancy(Name alias, Table<VacancyRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.vacancy</code> table reference
     */
    public Vacancy(String alias) {
        this(DSL.name(alias), VACANCY);
    }

    /**
     * Create an aliased <code>public.vacancy</code> table reference
     */
    public Vacancy(Name alias) {
        this(alias, VACANCY);
    }

    /**
     * Create a <code>public.vacancy</code> table reference
     */
    public Vacancy() {
        this(DSL.name("vacancy"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<VacancyRecord> getPrimaryKey() {
        return Keys.VACANCY_PKEY;
    }

    @Override
    public Vacancy as(String alias) {
        return new Vacancy(DSL.name(alias), this);
    }

    @Override
    public Vacancy as(Name alias) {
        return new Vacancy(alias, this);
    }

    @Override
    public Vacancy as(Table<?> alias) {
        return new Vacancy(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Vacancy rename(String name) {
        return new Vacancy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vacancy rename(Name name) {
        return new Vacancy(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vacancy rename(Table<?> name) {
        return new Vacancy(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vacancy where(Condition condition) {
        return new Vacancy(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vacancy where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vacancy where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vacancy where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vacancy where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vacancy where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vacancy where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vacancy where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vacancy whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vacancy whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
