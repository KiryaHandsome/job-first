/*
 * This file is generated by jOOQ.
 */
package com.job.generated.jooq.tables;


import com.job.generated.jooq.Keys;
import com.job.generated.jooq.Public;
import com.job.generated.jooq.tables.records.LabelRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Label extends TableImpl<LabelRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.label</code>
     */
    public static final Label LABEL = new Label();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LabelRecord> getRecordType() {
        return LabelRecord.class;
    }

    /**
     * The column <code>public.label.id</code>.
     */
    public final TableField<LabelRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.label.name</code>.
     */
    public final TableField<LabelRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    private Label(Name alias, Table<LabelRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Label(Name alias, Table<LabelRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.label</code> table reference
     */
    public Label(String alias) {
        this(DSL.name(alias), LABEL);
    }

    /**
     * Create an aliased <code>public.label</code> table reference
     */
    public Label(Name alias) {
        this(alias, LABEL);
    }

    /**
     * Create a <code>public.label</code> table reference
     */
    public Label() {
        this(DSL.name("label"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<UniqueKey<LabelRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.LABEL_NAME_KEY);
    }

    @Override
    public Label as(String alias) {
        return new Label(DSL.name(alias), this);
    }

    @Override
    public Label as(Name alias) {
        return new Label(alias, this);
    }

    @Override
    public Label as(Table<?> alias) {
        return new Label(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Label rename(String name) {
        return new Label(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Label rename(Name name) {
        return new Label(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Label rename(Table<?> name) {
        return new Label(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Label where(Condition condition) {
        return new Label(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Label where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Label where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Label where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Label where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Label where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Label where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Label where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Label whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Label whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
